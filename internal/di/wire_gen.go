// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"backend/internal/application"
	"backend/internal/di/db"
	"backend/internal/di/ginengine"
	user2 "backend/internal/domain/user"
	"backend/internal/infrastructure/user"
	"backend/internal/interface/api/handler"
	"backend/internal/interface/api/middleware"
	"backend/internal/interface/api/router"
	"backend/internal/server"

	"github.com/google/wire"
)

// Injectors from wire.go:

func InitializeServer() *server.Server {
	engine := ginengine.NewEngine()
	conn := db.NewDBConnection()
	queries := db.NewDB(conn)
	repository := user.NewRepository(queries)
	service := user2.NewService(repository)
	applicationUser := application.NewUser(repository, service)
	handlerUser := handler.NewUserHandler(applicationUser)
	healthCheck := handler.NewHealthCheck()
	metric := middleware.NewMetric()
	logging := middleware.NewLogging()
	routerRouter := router.NewRouter(handlerUser, healthCheck, metric, logging)
	serverServer := server.NewServer(engine, routerRouter)
	return serverServer
}

// wire.go:

var DBSet = wire.NewSet(db.NewDBConnection, db.NewDB)

var EngineSet = wire.NewSet(ginengine.NewEngine)

var RepositorySet = wire.NewSet(user.NewRepository)

var ServiceSet = wire.NewSet(user2.NewService)

var AppSet = wire.NewSet(application.NewUser)

var MiddlewareSet = wire.NewSet(middleware.NewMetric, middleware.NewLogging)

var HandlerSet = wire.NewSet(handler.NewUserHandler, handler.NewHealthCheck)

var RouterSet = wire.NewSet(router.NewRouter)
