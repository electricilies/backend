name: Main

on:
  workflow_dispatch:
    inputs:
      release:
        required: false
        default: "false"
        type: choice
        options:
          - "true"
          - "false"
        description: Release container
  push:
    branches:
      - main
    tags:
      - "v*"
    paths:
      - "**.go"
      - go.mod
      - go.sum
      - "**.sql"
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
    paths:
      - "**.go"
      - go.mod
      - go.sum
      - "**.sql"

env:
  MISE_OVERRIDE_CONFIG_FILENAMES: mise.ci.toml

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - uses: actions/setup-go@v6
        with:
          go-version-file: go.mod

      - uses: jdx/mise-action@v3
        with:
          experimental: true

      - name: Install go deps
        run: go mod download

      - name: Check static type
        id: static-type
        run: just check-static-type

      - name: Check lint
        id: lint
        run: just lint
        continue-on-error: true

      - name: Check format
        id: format
        run: just check-format
        continue-on-error: true

      - name: Fail check
        run: |
          declare -A check_status=(
            ["Static type check failed"]=${{ steps.static-type.outcome == 'failure' }}
            ["Lint check failed"]=${{ steps.lint.outcome == 'failure' }}
            ["Format check failed"]=${{ steps.format.outcome == 'failure' }}
          )
          fail=false
          for msg in "${!check_status[@]}"; do
              if [ "${check_status[$msg]}" = "true" ]; then
                  echo "ERROR: $msg" >&2
                  fail=true
              fi
          done
          if [ "$fail" = true ]; then
              exit 1
          fi
          echo "All checks passed successfully"

  test:
    name: Test ${{ matrix.os }}/${{ matrix.arch }}
    needs: check
    strategy:
      matrix:
        runner:
          - ubuntu-24.04
          - ubuntu-24.04-arm
          - macos-15-intel
          - macos-15
          - windows-2025
          - windows-11-arm
        include:
          - runner: ubuntu-24.04
            os: linux
            arch: amd64
          - runner: ubuntu-24.04-arm
            os: linux
            arch: arm64
          - runner: macos-15-intel
            os: darwin
            arch: amd64
          - runner: macos-15
            os: darwin
            arch: arm64
          - runner: windows-2025
            os: windows
            arch: amd64
          - runner: windows-11-arm
            os: windows
            arch: arm64
    runs-on: ${{ matrix.runner }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - uses: actions/setup-go@v6
        with:
          go-version-file: go.mod

      - uses: jdx/mise-action@v3
        with:
          experimental: true

      # TODO: Uncomment this out when using testcontainer

      # - name: Cache Docker images.
      #   uses: ScribeMD/docker-cache@0.5.0
      #   with:
      #     key: docker-${{ runner.os }}-${{ hashFiles('integrationtest/images.go') }}

      - name: Test
        id: test
        run: just test --tags=integration -coverprofile=coverage.txt
        continue-on-error: true

      - name: Upload results to Codecov
        uses: codecov/codecov-action@v5
        env:
          OS: ${{ matrix.os }}
          ARCH: ${{ matrix.arch }}
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          env_vars: OS,ARCH
          slug: ${{ github.repository }}

  sonar:
    name: SonarQube
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' || github.event_name == 'pull_request' }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v6
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  gen-migration:
    name: Generate Migration
    runs-on: ubuntu-latest
    needs: test
    if: >-
      ${{
        startsWith(github.ref, 'refs/tags/v') ||
        (github.event_name == 'workflow_dispatch' && inputs.release == 'true')
      }}
    concurrency: gen-migration
    permissions:
      contents: write
    outputs:
      committed: ${{ steps.add-and-commit.outputs.committed }}
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - uses: jdx/mise-action@v3
        with:
          experimental: true

      - name: gen migration
        run: just atlas-gen-migration

      - uses: EndBug/add-and-commit@v9
        id: add-and-commit
        with:
          add: migration/
          message: |-
            build(migration): update migration
            [skip ci]

  build-migrate:
    name: Build Migrate
    runs-on: ubuntu-latest
    needs:
      - gen-migration
    concurrency: build-migrate
    permissions:
      packages: write
    steps:
      - name: Checkout
        if: ${{ needs.gen-migration.outputs.committed == 'true' }}
        uses: actions/checkout@v5

      - name: Get commit hash
        if: ${{ needs.gen-migration.outputs.committed == 'true' }}
        id: commit-hash
        working-directory: .
        run: echo "commit=$(git rev-parse HEAD)" >>"${GITHUB_OUTPUT}"

      - name: Login
        if: ${{ needs.gen-migration.outputs.committed == 'true' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        if: ${{ needs.gen-migration.outputs.committed == 'true' }}
        uses: docker/build-push-action@v6
        with:
          context: .
          file: build/migrate.Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/migrate:latest
            ghcr.io/${{ github.repository_owner }}/migrate:${{ steps.commit-hash.outputs.commit }}
            ghcr.io/${{ github.repository_owner }}/migrate:${{ github.ref_name }}

  build-backend:
    name: Build Backend
    runs-on: ubuntu-latest
    needs: test
    if: >-
      ${{
        startsWith(github.ref, 'refs/tags/v') ||
        (github.event_name == 'workflow_dispatch' && inputs.release == 'true')
      }}
    concurrency: build-backend
    permissions:
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Get commit hash
        id: commit-hash
        working-directory: .
        run: echo "commit=$(git rev-parse HEAD)" >>"${GITHUB_OUTPUT}"

      - name: Login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: build/backend.Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ steps.commit-hash.outputs.commit }}
            ghcr.io/${{ github.repository }}:${{ github.ref_name }}

  swagger:
    name: Deploy swagger page
    runs-on: ubuntu-latest
    needs: check
    concurrency: swagger
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch' }}
    permissions:
      pages: write
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5

      - uses: actions/setup-go@v6
        with:
          go-version-file: go.mod

      - uses: jdx/mise-action@v3
        with:
          experimental: true

      - name: Install go deps
        run: go mod download

      - run: just swagger-docs

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  update-kube:
    name: Update Kubernetes Manifest
    runs-on: ubuntu-latest
    needs:
      - build-migrate
      - build-backend
    if: >-
      ${{
        (startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch') &&
        (needs.build-backend.result == 'success') &&
        (needs.build-migrate.result == 'success' || needs.build-migrate.result == 'skipped')
      }}
    steps:
      - name: Get token
        id: get-token
        uses: actions/create-github-app-token@v2
        with:
          private-key: ${{ secrets.ELECTRICILIES_BOT_PRIVATE_KEY }}
          app-id: ${{ vars.ELECTRICILIES_BOT_APP_ID }}
          owner: ${{ github.repository_owner }}
          repositories: infrastructure

      - name: Trigger Renovate
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ steps.get-token.outputs.token }}
          repository: ${{ github.repository_owner }}/infrastructure
          event-type: renovate
          client-payload: |- # language: json
            {
              "images": "ghcr.io/${{ github.repository }},ghcr.io/${{ github.repository_owner }}/migrate"
            }
