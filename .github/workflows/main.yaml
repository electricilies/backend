name: Main

on:
  workflow_dispatch:
  push:
    branches:
      - main
    tags:
      - "v*"
    paths:
      - "**.go"
      - go.mod
      - go.sum
  pull_request:
    types:
      - opened
      - synchronize
      - reopened
    paths:
      - "**.go"
      - go.mod
      - go.sum

jobs:
  check:
    name: Check
    runs-on: ubuntu-latest
    steps:
      - &checkout
        name: Checkout
        uses: actions/checkout@v5

      - &setup-go
        uses: actions/setup-go@v6
        with:
          go-version-file: go.mod

      - &use-mise
        uses: jdx/mise-action@v3
        env:
          MISE_OVERRIDE_CONFIG_FILENAMES: mise.ci.toml
        with:
          experimental: true

      - &install-go-deps
        name: Install go deps
        run: go mod download

      - name: Lint
        id: lint
        run: just lint
        continue-on-error: true

      - name: Check format
        id: format
        run: just check-format
        continue-on-error: true

      - name: Test
        id: test
        run: just test -coverprofile=coverage.txt
        continue-on-error: true

      - name: Upload results to Codecov
        if: ${{ steps.test.outcome == 'success' }}
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: ${{ github.repository }}

      - name: Fail check
        if: >-
          ${{
            steps.lint.outcome == 'failure' ||
            steps.format.outcome == 'failure' ||
            steps.test.outcome == 'failure'
          }}
        run: exit 1

  sonar:
    name: SonarQube
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' || github.event_name == 'pull_request' }}
    steps:
      - <<: *checkout
        with:
          fetch-depth: 0

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v6
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  gen-migration:
    name: Generate Migration
    runs-on: ubuntu-latest
    needs: check
    if: ${{ startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch' }}
    concurrency: gen-migration
    permissions:
      contents: write
    outputs:
      committed: ${{ steps.add-and-commit.outputs.committed }}
    steps:
      - *checkout

      - *use-mise

      - name: gen migration
        run: just atlas-gen-migration

      - uses: EndBug/add-and-commit@v9
        id: add-and-commit
        with:
          add: migration/
          message: |-
            build(migration): update migration
            [skip ci]

  build-migrate:
    name: Build Migrate
    runs-on: ubuntu-latest
    needs:
      - check
      - gen-migration
    if: >-
      ${{
        (startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch')
        && needs.gen-migration.outputs.committed == 'true'
      }}
    concurrency: build-migrate
    permissions:
      packages: write
    steps:
      - *checkout

      - name: Get commit hash
        id: commit-hash
        working-directory: .
        run: echo "commit=$(git rev-parse HEAD)" >>"${GITHUB_OUTPUT}"

      - &docker-login
        name: Login
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: build/migrate.Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/migrate:latest
            ghcr.io/${{ github.repository_owner }}/migrate:${{ steps.commit-hash.outputs.commit }}
            ghcr.io/${{ github.repository_owner }}/migrate:${{ github.ref_name }}

  build-backend:
    name: Build Backend
    runs-on: ubuntu-latest
    needs: check
    if: ${{ startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch' }}
    concurrency: build-backend
    permissions:
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Get commit hash
        id: commit-hash
        working-directory: .
        run: echo "commit=$(git rev-parse HEAD)" >>"${GITHUB_OUTPUT}"

      - *docker-login

      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: build/backend.Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository }}:latest
            ghcr.io/${{ github.repository }}:${{ steps.commit-hash.outputs.commit }}
            ghcr.io/${{ github.repository }}:${{ github.ref_name }}

  swagger:
    name: Deploy swagger page
    runs-on: ubuntu-latest
    needs: check
    concurrency: swagger
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch' }}
    permissions:
      pages: write
      id-token: write
    steps:
      - *checkout

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v5

      - *setup-go

      - *use-mise

      - *install-go-deps

      - run: just swagger-docs

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs/

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  update-kube:
    name: Update Kubernetes Manifest
    runs-on: ubuntu-latest
    needs:
      - build-migrate
      - build-backend
    if: >-
      ${{
        (startsWith(github.ref, 'refs/tags/v') || github.event_name == 'workflow_dispatch') &&
        (needs.build-backend.result == 'success') &&
        (needs.build-migrate.result == 'success' || needs.build-migrate.result == 'skipped')
      }}
    steps:
      - name: Get token
        id: get_token
        uses: actions/create-github-app-token@v2
        with:
          private-key: ${{ secrets.ELECTRICILIES_BOT_PRIVATE_KEY }}
          app-id: ${{ vars.ELECTRICILIES_BOT_APP_ID }}
          owner: ${{ github.repository_owner }}
          repositories: kubernetes-manifest

      - name: Trigger Renovate
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ steps.get_token.outputs.token }}
          repository: ${{ github.repository_owner }}/kubernetes-manifest
          event-type: renovate
          client-payload: |- # language: json
            {
              "images": "ghcr.io/${{ github.repository }},ghcr.io/${{ github.repository_owner }}/migrate"
            }
